name: Run Tests

on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: Select the environment
      folder-names:
        type: string
        description: 'Select the folders to execute tests (use comma for multi-select)'
      test-type:
        type: choice
        description: 'Select the type of test'
        options:
          - Nonreg
          - All Tests

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Display Inputs
        run: |
          Write-Host "environment is ${{ github.event.inputs.environment }}"
          Write-Host "folder-names is ${{ github.event.inputs.folder-names }}"
          Write-Host "test-type is ${{ github.event.inputs.test-type }}"

      # Include the JavaScript file
      - name: Include JavaScript for folder checkboxes
        run: |
          mkdir -p .github/scripts
          curl -o .github/scripts/checkbox-folders.js https://raw.githubusercontent.com/<YOUR_REPOSITORY>/main/checkbox-folders.js

      - name: Run Tests
        working-directory: ./src
        run: |
          npm install
          $selectedFolders = "${{ github.event.inputs.folder-names }}" -split ','

          foreach ($folder in $selectedFolders) {
            $env:FOLDER_NAME = $folder
            $env:FEATURE_PATH = "./Features/tas-apis/$env:FOLDER_NAME/features"

            if (Test-Path -Path $env:FEATURE_PATH) {
              $files = Get-ChildItem -Path $env:FEATURE_PATH -Filter "*.feature" -Recurse | ForEach-Object { $_.FullName -replace '\\', '/' }
              $featureFiles += $files
            } else {
              Write-Host "Folder $folder does not exist."
            }
          }

          # Check if feature files were found and run the tests
          if ($featureFiles.Count -gt 0) {
            # Loop through the feature files and run the tests
            foreach ($file in $featureFiles) {
              Write-Host "Running feature file: $file"
              npm run test -- $file
            }
          } else {
            Write-Host "No feature files found for the selected test type."
          }

          Write-Host "Process completed."
