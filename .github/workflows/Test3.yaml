name: Run Tests

on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: Select the environment
      folder-config:
        type: string
        description: 'Select the YAML/JSON file containing the folders and their states'
        default: './workflows/folder-config.yml'
      test-type:
        type: choice
        description: 'Select the type of test'
        options:
          - Nonreg
          - All Tests

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Display Inputs
        run: |
          Write-Host "environment is ${{ github.event.inputs.environment }}"
          Write-Host "sgnum folder selected: ${{ github.event.inputs.sgnum }}"
          Write-Host "Test2 folder selected: ${{ github.event.inputs.Test2 }}"
          Write-Host "test-type is ${{ github.event.inputs.test-type }}"
          
      - name: Run Custom Folder Selection Script
        id: custom-folder-selection
        run: |
          # Retrieve the folder-config file path from the input
          folder_config_path="${{ github.event.inputs.folder-config }}"

          # Read the folder-config file content and process the folder selection using your custom script (JavaScript/Python)
          # ...

      - name: Read Selected Folders
        run: |
          # Read the selected_folders.txt file generated by the previous step
          selected_folders=$(cat selected_folders.txt)
          echo "Selected folders: $selected_folders"

          # Set the selected_folders as an environment variable for further steps (if needed)
          echo "SELECTED_FOLDERS=$selected_folders" >> $GITHUB_ENV

      - name: Run Tests
        working-directory: ./src
        run: |
          # You can access the selected folders using $SELECTED_FOLDERS environment variable
          echo "Selected folders in the test step: $SELECTED_FOLDERS"

     
      - name: Run Tests
        working-directory: ./src
        run: |
          npm install

                # Use split function to separate selected folders
                $selectedFolders = $env:selected_folders -split ','

                Write-Host "Selected folders: $($selectedFolders -join ',')"
                Write-Host "Selected folders count: $($selectedFolders.Count)"

                $testType = "${{ github.event.inputs.test-type }}"

                foreach ($folder in $selectedFolders) {
                  $env:FOLDER_NAME = $folder
                  Write-Host "Running tests for folder: $env:FOLDER_NAME"
                  $env:FEATURE_PATH = "./Features/tas-apis/$env:FOLDER_NAME/features"
                  Write-Host "FEATURE_PATH: $env:FEATURE_PATH"

            # Check if the folder exists
            if (Test-Path -Path $env:FEATURE_PATH) {
              # Create an empty array to store feature files
              $featureFiles = @()

              # Search for feature files based on test type selection
              if ("${{ github.event.inputs.test-type }}" -eq 'All Tests') {
                Write-Host "Running All Test Feature Files"
                $featureFiles = Get-ChildItem -Path $env:FEATURE_PATH -Filter "*.feature" -Recurse | ForEach-Object { $_.FullName -replace '\\', '/' }
              }
              elseif ("${{ github.event.inputs.test-type }}" -eq 'Nonreg') {
                Write-Host "Running Nonreg Feature Files"
                $featureFiles = Get-ChildItem -Path $env:FEATURE_PATH -Filter "*.feature" -Recurse | ForEach-Object {
                  $content = Get-Content $_
                  if ($content -match '@nonreg') { $_.FullName -replace '\\', '/' }
                }
              } else {
                Write-Host "Please select a valid test type."
                exit 1
              }

            # Check if feature files were found and run the tests
              if ($featureFiles.Count -gt 0) {
                # Loop through the feature files and run the tests
                foreach ($file in $featureFiles) {
                  Write-Host "Running feature file: $file"
                  npm run test -- $file
                }
              } else {
                Write-Host "No feature files found for the selected test type in folder $folderName."
              }
            } else {
              Write-Host "Folder $folderName does not exist."
            }
          }
          Write-Host "All folders completed."
