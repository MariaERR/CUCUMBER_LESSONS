name: CI

on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: Select the environment
      folder-name:
        type: string
        description: 'Enter the folder to execute tests (use comma for multi-select)'
      test-type:
        type: choice
        description: 'Select the type of test'
        options:
          - Nonreg
          - All Tests

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Display Inputs
        run: |
          Write-Host "environment is ${{ github.event.inputs.environment }}"
          Write-Host "folder-name is ${{ github.event.inputs.folder-name }}"
          Write-Host "test-type is ${{ github.event.inputs.test-type }}"
          
# ... (previous steps)

      - name: Run Tests
        working-directory: ./src
        run: |
          npm install
          $env:FOLDER_NAME="${{ github.event.inputs.folder-name }}"
          Write-Host "FOLDER_NAME : $env:FOLDER_NAME"
          $env:FEATURE_PATH="./Features/tas-apis/$env:FOLDER_NAME/features"
          Write-Host "FEATURE_PATH : $env:FEATURE_PATH"

          # Create an empty array to store feature files
          $featureFiles = @()

          # Search for feature files based on test type selection
          if ("${{ github.event.inputs.test-type }}" -eq 'All Tests') {
            Write-Host "Running All Test Feature Files"
            $featureFiles = Get-ChildItem -Path $env:FEATURE_PATH -Filter "*.feature" -Recurse | ForEach-Object { $_.FullName -replace '\\', '/' }
          } 
          elseif ("${{ github.event.inputs.test-type }}" -eq 'Nonreg') {
            Write-Host "Running Nonreg Feature Files"
            $featureFiles = Get-ChildItem -Path $env:FEATURE_PATH -Filter "*.feature" -Recurse | ForEach-Object {
              $content = Get-Content $_
              if ($content -match '@nonreg') { $_.FullName -replace '\\', '/' }
            }
          } else {
            Write-Host "Please select a valid test type."
            exit 1
          }

          # Check if feature files were found and run the tests
          if ($featureFiles.Count -gt 0) {
            # Convert the array to a comma-separated string
            $env:FEATURE_FILES_STRING = $featureFiles -join ','
            Write-Host "FEATURE_FILES_STRING: $env:FEATURE_FILES_STRING"

            # Run the tests using the concatenated feature files string
            npm run test -- $env:FEATURE_FILES_STRING
          } else {
            Write-Host "No feature files found for the selected test type."
          }

          Write-Host "Process completed."
